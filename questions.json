[
  {
    "question": "What is XSS? Name its three primary types and a mitigation for each.",
    "category": "Security",
    "answer": "<p>XSS (Cross-Site Scripting) is a vulnerability that allows attackers to inject <strong>malicious scripts</strong> into web pages viewed by other users.</p><ul><li><strong>Reflected XSS:</strong> Script is reflected in the server response. <em>Mitigation:</em> Apply <strong>output encoding</strong> on user input.</li><li><strong>Stored XSS:</strong> Malicious script is stored on the server (e.g., database, comments). <em>Mitigation:</em> Use <strong>input validation</strong> and sanitization, plus output encoding.</li><li><strong>DOM-based XSS:</strong> The issue exists in client-side JS modifying the DOM. <em>Mitigation:</em> Avoid unsafe DOM methods and use <strong>Content Security Policy (CSP)</strong>.</li></ul>"
  },
  {
    "question": "Explain CSRF and how anti-CSRF tokens mitigate it.",
    "category": "Security",
    "answer": "<p>CSRF (Cross-Site Request Forgery) tricks an authenticated user’s browser into sending <strong>unauthorized requests</strong> to a trusted web application without their intent.</p><p><strong>Mitigation:</strong> Use anti-CSRF tokens — unique, unpredictable values tied to the user’s session. The server validates the token with each request, and attackers cannot forge valid tokens.</p>"
  },
  {
    "question": "Which secure cookie flags should you set and why?",
    "category": "Security",
    "answer": "<p>To secure cookies, the following flags should be set:</p><ul><li><strong>HttpOnly:</strong> Prevents JavaScript from accessing cookies, reducing XSS risk.</li><li><strong>Secure:</strong> Ensures cookies are only sent over HTTPS, protecting against interception.</li><li><strong>SameSite:</strong> Controls cross-site cookie sharing. Use <em>Strict</em> for maximum security, <em>Lax</em> for balance, or <em>None</em> only when necessary with Secure.</li></ul>"
  }
]
